using UnityEngine;
using Zenject;
using Project.Core.Services.Addressable;
using Project.Core.Config.Addressable;

namespace Project.Core.Installers
{
    /// <summary>
    /// Zenject installer for Addressable services
    /// Zenject инсталлер для сервисов Addressables
    /// </summary>
    [CreateAssetMenu(fileName = "AddressableServiceInstaller", menuName = "Installers/AddressableServiceInstaller")]
    public class AddressableServiceInstaller : ScriptableObjectInstaller<AddressableServiceInstaller>
    {
        [Header("Configuration / Конфигурация")]
        
        /// <summary>
        /// Addressable configuration asset / Ресурс конфигурации Addressables
        /// </summary>
        [SerializeField] private AddressableConfig _addressableConfig;
        
        [Header("Settings / Настройки")]
        
        /// <summary>
        /// Enable automatic initialization / Включить автоматическую инициализацию
        /// </summary>
        [SerializeField] private bool _autoInitialize = true;
        
        /// <summary>
        /// Bind as singleton / Привязать как синглтон
        /// </summary>
        [SerializeField] private bool _bindAsSingleton = true;

        /// <summary>
        /// Install bindings / Установить привязки
        /// </summary>
        public override void InstallBindings()
        {
            ValidateConfiguration();
            
            // Bind configuration / Привязать конфигурацию
            BindConfiguration();
            
            // Bind services / Привязать сервисы
            BindServices();
            
            // Setup initialization / Настроить инициализацию
            if (_autoInitialize)
            {
                SetupAutoInitialization();
            }
            
            Debug.Log("[AddressableServiceInstaller] Bindings installed successfully");
        }

        /// <summary>
        /// Bind configuration components / Привязать компоненты конфигурации
        /// </summary>
        private void BindConfiguration()
        {
            // Bind config asset / Привязать конфиг ресурс
            Container.Bind<AddressableConfig>()
                .FromInstance(_addressableConfig)
                .AsSingle()
                .NonLazy();

            // Bind config repository / Привязать репозиторий конфига
            if (_bindAsSingleton)
            {
                Container.Bind<IAddressableConfigRepository>()
                    .To<AddressableConfigRepository>()
                    .AsSingle()
                    .NonLazy();
            }
            else
            {
                Container.Bind<IAddressableConfigRepository>()
                    .To<AddressableConfigRepository>()
                    .AsTransient();
            }
        }

        /// <summary>
        /// Bind service components / Привязать сервисные компоненты
        /// </summary>
        private void BindServices()
        {
            // Bind catalog manager / Привязать менеджер каталогов
            if (_bindAsSingleton)
            {
                Container.Bind<ICatalogManager>()
                    .To<CatalogManager>()
                    .AsSingle()
                    .NonLazy();
            }
            else
            {
                Container.Bind<ICatalogManager>()
                    .To<CatalogManager>()
                    .AsTransient();
            }

            // Bind main addressable service / Привязать основной сервис addressables
            if (_bindAsSingleton)
            {
                Container.Bind<IAddressableService>()
                    .To<AddressableService>()
                    .AsSingle()
                    .NonLazy();
            }
            else
            {
                Container.Bind<IAddressableService>()
                    .To<AddressableService>()
                    .AsTransient();
            }
        }

        /// <summary>
        /// Setup automatic initialization / Настроить автоматическую инициализацию
        /// </summary>
        private void SetupAutoInitialization()
        {
            // Bind initializer / Привязать инициализатор
            Container.Bind<AddressableSystemInitializer>()
                .AsSingle()
                .NonLazy();
        }

        /// <summary>
        /// Validate configuration / Проверить конфигурацию
        /// </summary>
        private void ValidateConfiguration()
        {
            if (_addressableConfig == null)
            {
                Debug.LogError("[AddressableServiceInstaller] AddressableConfig is not assigned!");
                return;
            }

            if (_addressableConfig.Settings == null)
            {
                Debug.LogError("[AddressableServiceInstaller] AddressableConfig.Settings is null!");
                return;
            }

            Debug.Log($"[AddressableServiceInstaller] Configuration validated successfully. Profile: {_addressableConfig.Settings.DefaultProfile}");
        }

        /// <summary>
        /// Validate installer in editor / Проверить инсталлер в редакторе
        /// </summary>
        private void OnValidate()
        {
            if (_addressableConfig == null)
            {
                Debug.LogWarning("[AddressableServiceInstaller] Please assign AddressableConfig reference");
            }
        }
    }

    /// <summary>
    /// Initializer for Addressable system
    /// Инициализатор для системы Addressables
    /// </summary>
    public class AddressableSystemInitializer : IInitializable
    {
        private readonly IAddressableService _addressableService;

        /// <summary>
        /// Constructor / Конструктор
        /// </summary>
        public AddressableSystemInitializer(IAddressableService addressableService)
        {
            _addressableService = addressableService;
        }

        /// <summary>
        /// Initialize system / Инициализировать систему
        /// </summary>
        public void Initialize()
        {
            Debug.Log("[AddressableSystemInitializer] Addressable system initialized");
            
            // Additional initialization logic can be added here
            // Дополнительная логика инициализации может быть добавлена здесь
        }
    }
}